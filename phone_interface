import React from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, doc, deleteDoc, query, orderBy } from 'firebase/firestore';
import { Wifi, BatteryFull, Signal } from 'lucide-react';

// --- Firebase Configuration ---
// These global variables are provided by the environment.
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-happy-wallpaper';

// --- Default Happy Items ---
const defaultHappyItems = [
  { id: 'default-1', text: 'A warm cup of coffee ☕' },
  { id: 'default-2', text: 'Listening to a favorite song 🎵' },
  { id: 'default-3', text: 'A sunny walk outside ☀️' },
  { id: 'default-4', text: 'Laughing with a friend 😂' },
  { id: 'default-5', text: 'Finishing a good book 📖' },
  { id: 'default-6', text: 'A cozy nap 😴' },
];

// --- Helper Components ---

// StatusBar: Mimics the iPhone status bar with dynamic time
const StatusBar = () => {
  const [time, setTime] = React.useState(new Date());

  React.useEffect(() => {
    const timer = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  const formatTime = (date) => {
    let hours = date.getHours();
    let minutes = date.getMinutes();
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0' + minutes : minutes;
    return `${hours}:${minutes}`;
  };

  return (
    <div className="absolute top-0 left-0 right-0 h-11 px-6 flex justify-between items-center text-white font-semibold text-sm z-10">
      <span>{formatTime(time)}</span>
      <div className="flex items-center gap-1.5">
        <Signal size={16} />
        <Wifi size={16} />
        <BatteryFull size={20} />
      </div>
    </div>
  );
};

// AddItemModal: A modal for adding new happy thoughts
const AddItemModal = ({ onSave, onCancel }) => {
  const [text, setText] = React.useState('');

  const handleSave = () => {
    if (text.trim()) {
      onSave(text.trim());
      setText('');
    }
  };

  return (
    <div className="absolute inset-0 bg-black/50 backdrop-blur-md flex justify-center items-center z-50">
      <div className="bg-white/80 rounded-2xl p-6 w-72 shadow-lg border border-white/20">
        <h3 className="text-lg font-bold text-gray-800 mb-4 text-center">Add a Happy Thought</h3>
        <input
          type="text"
          value={text}
          onChange={(e) => setText(e.target.value)}
          placeholder="e.g., Petting a dog 🐶"
          className="w-full p-3 rounded-lg border-gray-300 focus:ring-2 focus:ring-blue-400 focus:border-blue-400 transition-shadow outline-none"
        />
        <div className="flex justify-between mt-5 gap-3">
          <button
            onClick={onCancel}
            className="w-full py-2 bg-gray-300/70 text-gray-800 font-semibold rounded-lg hover:bg-gray-400/80 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={handleSave}
            className="w-full py-2 bg-blue-500 text-white font-semibold rounded-lg hover:bg-blue-600 transition-colors"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
};

// --- Main App Component ---
export default function App() {
  const [happyItems, setHappyItems] = React.useState(defaultHappyItems);
  const [isModalOpen, setIsModalOpen] = React.useState(false);
  const [db, setDb] = React.useState(null);
  const [auth, setAuth] = React.useState(null);
  const [userId, setUserId] = React.useState(null);
  const [isAuthReady, setIsAuthReady] = React.useState(false);

  // Initialize Firebase and set up authentication listener
  React.useEffect(() => {
    try {
      const app = initializeApp(firebaseConfig);
      const firestore = getFirestore(app);
      const authInstance = getAuth(app);
      setDb(firestore);
      setAuth(authInstance);

      onAuthStateChanged(authInstance, async (user) => {
        if (user) {
          setUserId(user.uid);
        } else {
          // If no user, try to sign in with token or anonymously
          try {
             if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                await signInWithCustomToken(authInstance, __initial_auth_token);
             } else {
                await signInAnonymously(authInstance);
             }
          } catch(authError) {
             console.error("Authentication failed:", authError);
             setUserId(crypto.randomUUID()); // Fallback for environments without auth
          }
        }
        setIsAuthReady(true);
      });
    } catch (e) {
      console.error("Firebase initialization failed:", e);
      setIsAuthReady(true); // Proceed without DB functionality
    }
  }, []);

  // Set up Firestore listener for happy items
  React.useEffect(() => {
    if (!isAuthReady || !db || !userId) return;

    const collectionPath = `artifacts/${appId}/users/${userId}/happyThings`;
    const q = query(collection(db, collectionPath), orderBy("createdAt", "desc"));
    
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const items = [];
      querySnapshot.forEach((doc) => {
        items.push({ id: doc.id, ...doc.data() });
      });
      // If user has items, show them. Otherwise, show defaults.
      setHappyItems(items.length > 0 ? items : defaultHappyItems);
    }, (error) => {
      console.error("Error fetching happy items:", error);
    });

    return () => unsubscribe();
  }, [isAuthReady, db, userId]);

  // Function to add a new happy item to Firestore
  const addHappyItem = async (text) => {
    if (!db || !userId) return;
    try {
      const collectionPath = `artifacts/${appId}/users/${userId}/happyThings`;
      await addDoc(collection(db, collectionPath), {
        text: text,
        createdAt: new Date(),
      });
      setIsModalOpen(false);
    } catch (error) {
      console.error("Error adding document: ", error);
    }
  };
  
  // Function to delete an item
  const deleteHappyItem = async (id) => {
      // Prevent deleting default items
      if (id.startsWith('default-')) return;
      if (!db || !userId) return;
      try {
        const docPath = `artifacts/${appId}/users/${userId}/happyThings/${id}`;
        await deleteDoc(doc(db, docPath));
      } catch(error) {
        console.error("Error deleting item:", error);
      }
  }

  return (
    <div className="w-full h-full bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 flex flex-col justify-center items-center font-sans antialiased overflow-hidden">
      <div className="relative w-[375px] h-[812px] bg-cover bg-center rounded-[40px] shadow-2xl overflow-hidden border-4 border-black">
        <div className="absolute inset-0 bg-gradient-to-br from-indigo-400/30 via-purple-400/30 to-pink-400/30"></div>
        <StatusBar />
        
        {isModalOpen && <AddItemModal onSave={addHappyItem} onCancel={() => setIsModalOpen(false)} />}
        
        <main className="relative z-0 pt-20 pb-28 h-full overflow-y-auto px-4">
            <h1 className="text-white text-3xl font-bold text-center mb-1 leading-tight">Things to</h1>
            <h2 className="text-white text-5xl font-bold text-center mb-6 leading-tight">Light Up the Day</h2>

            <div className="space-y-3">
              {happyItems.map((item, index) => (
                <div 
                  key={item.id} 
                  className="group bg-white/20 backdrop-blur-md border border-white/30 rounded-2xl p-4 flex items-center justify-between shadow-md transition-all duration-300 hover:bg-white/30 hover:scale-105 active:scale-100 cursor-pointer"
                >
                  <span className="text-white text-lg">{item.text}</span>
                   {!item.id.startsWith('default-') && (
                        <button
                          onClick={(e) => { e.stopPropagation(); deleteHappyItem(item.id); }}
                          className="text-white/50 opacity-0 group-hover:opacity-100 hover:text-white transition-opacity"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                        </button>
                    )}
                </div>
              ))}
            </div>
        </main>
        
        {/* Add Button */}
        <div className="absolute bottom-24 left-1/2 -translate-x-1/2 z-10">
             <button
                onClick={() => setIsModalOpen(true)}
                className="w-16 h-16 bg-white/30 backdrop-blur-xl border border-white/40 rounded-full flex items-center justify-center text-white shadow-lg hover:bg-white/40 transition-all duration-300 transform hover:scale-110 active:scale-100"
                aria-label="Add new happy thought"
            >
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            </button>
        </div>
      </div>
    </div>
  );
}
